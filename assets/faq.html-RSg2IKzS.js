import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as s,o as c,c as i,d as a,e as n,a as t,b as l}from"./app-QME0WzCh.js";const u={},r=l(`<h2 id="性能" tabindex="-1"><a class="header-anchor" href="#性能"><span>性能</span></a></h2><p>sys-shim 使用 WebSocket 与 main.exe 进行交互，有以下几个环节：</p><ul><li>js 代码构建环节</li><li>websocket 通信环节</li><li>main.exe 代码加载和执行环节</li></ul><p>对于单个同步调用，例如调用 main.exe 中的方法进行数组裁剪，在 <code>Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz</code> 上调用以下代码 10 次，平均每次耗时在 50ms 左右。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> native<span class="token punctuation">.</span>table<span class="token punctuation">.</span><span class="token function">unpack</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 44.8 ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上像裁剪数组这类需要处理数据的操作，直接使用 js 现有的方法即可，只有调用系统 api 时，才应使用 sys-shim 的方法，例如使用以下代码获取 cpu 商标，用于也在 50ms 左右：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> native<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>cpu<span class="token punctuation">.</span><span class="token function">getBrand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 49.2 ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即使遇到耗时的操作利用 js 的 async 语法有效避免，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> main<span class="token punctuation">.</span>native<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;同步运行完成了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 5054.5 ms</span>

console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
main<span class="token punctuation">.</span>native<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;异步运行完成了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 0.6 ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效率较低的场景是需要与操作系统进行极其频繁且同步交互的场景，例如在遍历目录时，在每个回调函数里根据根据函数返回值决定是否继续遍历：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">let</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">await</span> native<span class="token punctuation">.</span>fsys<span class="token punctuation">.</span><span class="token function">enum</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">C:/</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">*.*</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">dir<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> fullpath<span class="token punctuation">,</span> findData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    num <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span>
    list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fullpath <span class="token operator">||</span> dir<span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&gt;=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 527.7 ms</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span>num<span class="token punctuation">,</span> list<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的逻辑是，遍历数量等于 10 时停止遍历。由于每次遍历，都要经过完整的 main.exe/js 通信过程，所以 10 个文件就耗时 500ms 左右，也就是一秒才能遍历 20 个文件。对于要求快速扫描目录文件的场景来说，效率很低。</p><p>好在这些场景不是大多数程序和大多数操作都会涉及到的事情，而且也有很简单的处理方法，例如直接在当前页面使用原生代码或你熟悉的[其他语言](// todo)来完成。</p><p>例如使用原生语言遍历 5000 个文件，耗时为 300ms 左右：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> cur<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> main<span class="token punctuation">.</span><span class="token function">ws</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">run</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  var num = 0
  var cur = null
  var size = ...
  fsys.enum(&quot;C:/&quot;, &quot;*.*&quot;, function (dir, filename, fullpath, findData) {
    num = num + 1
    cur = fullpath || dir
    if(num &gt;= size) {
      return false
    }
  },
  true
  )
  return num, cur
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 334.5 ms</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span>num<span class="token punctuation">,</span> cur<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安全" tabindex="-1"><a class="header-anchor" href="#安全"><span>安全</span></a></h2><p>由于 main.exe 启动后，暴露了一个 websocket 接口，连接到此接口的任何程序都可以通过它运行系统命令，所以在一些杀毒程序看来，这是十分危险的，因为它向外暴露了接口来操作计算机资源，导致杀毒软件会提示 main.exe 为病毒程序。</p><p>而实际上，我们为此做出了一些设计来避免非法操作：</p><ul><li>main.exe 启动的 websocket/http 接口只绑定到本机 IP 域下，即同一个局域网下的其他设备和公网无法访问到这个接口。</li><li>程序启动时，会随机生成一个 token，就算能访问 websocket 接口，也需要通过 token 的正确性验证才可以连接。</li><li>对于 web 环境中，就算页面已经允许跨域，已经知道 token，也可以配置允许连接的域名来阻止未经授权的域名连接 websocket 接口。</li></ul><p>你发布的程序应尽量本地化，虽然 main.exe 可以让你的线上页面获得访问用户本地资源的能力，但你也应承担起保护用户安全的责任。避免你的线上页面被加入恶意代码，如果对用户造成伤害，你将可能会承担法律责任。</p><h2 id="稳定" tabindex="-1"><a class="header-anchor" href="#稳定"><span>稳定</span></a></h2><p>sys-shim 默认情况下，所有操作都是在子线程中运行的，子线程出现错误时并不会导致整个应用崩溃，也不会影响主进程的运行。</p><h2 id="兼容" tabindex="-1"><a class="header-anchor" href="#兼容"><span>兼容</span></a></h2>`,23),k={href:"https://www.npmjs.com/package/sys-shim?activeTab=versions",target:"_blank",rel:"noopener noreferrer"};function d(m,v){const e=s("ExternalLinkIcon"),p=s("RenderedHack");return c(),i("div",null,[r,a("p",null,[n("sys-shim 的兼容性支持 win7/win8/win10/win11 版本，并严格遵循语义化版本规范进行更新，避免引入不兼容的改动。你可以通过依赖锁来指定任意版本，点击这里查看"),a("a",k,[n("历史版本和更新日志"),t(e)]),n("。")]),t(p)])}const h=o(u,[["render",d],["__file","faq.html.vue"]]),f=JSON.parse('{"path":"/docs/getting-started/faq.html","title":"常见问答","lang":"zh-CN","frontmatter":{"title":"常见问答","description":"性能 sys-shim 使用 WebSocket 与 main.exe 进行交互，有以下几个环节： js 代码构建环节 websocket 通信环节 main.exe 代码加载和执行环节 对于单个同步调用，例如调用 main.exe 中的方法进行数组裁剪，在 Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz 上调用以下代...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/sys-shim-doc/docs/getting-started/faq.html"}],["meta",{"property":"og:site_name","content":"sys-shim"}],["meta",{"property":"og:title","content":"常见问答"}],["meta",{"property":"og:description","content":"性能 sys-shim 使用 WebSocket 与 main.exe 进行交互，有以下几个环节： js 代码构建环节 websocket 通信环节 main.exe 代码加载和执行环节 对于单个同步调用，例如调用 main.exe 中的方法进行数组裁剪，在 Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz 上调用以下代..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-14T10:59:48.000Z"}],["meta",{"property":"article:author","content":"wll8"}],["meta",{"property":"article:modified_time","content":"2024-05-14T10:59:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常见问答\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-14T10:59:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wll8\\",\\"url\\":\\"https://github.com/wll8\\"}]}"]]},"headers":[{"level":2,"title":"性能","slug":"性能","link":"#性能","children":[]},{"level":2,"title":"安全","slug":"安全","link":"#安全","children":[]},{"level":2,"title":"稳定","slug":"稳定","link":"#稳定","children":[]},{"level":2,"title":"兼容","slug":"兼容","link":"#兼容","children":[]}],"git":{"createdTime":1715684388000,"updatedTime":1715684388000,"contributors":[{"name":"wll8","email":"xwdaysme@gmail.com","commits":1}]},"readingTime":{"minutes":3.4,"words":1019},"filePathRelative":"docs/getting-started/faq.md","localizedDate":"2024年5月14日","autoDesc":true}');export{h as comp,f as data};
