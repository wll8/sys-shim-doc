import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o,c as l,d as s,e as n,a,b as c}from"./app-i__oQQG0.js";const r={},d=s("h3",{id:"方式一-直接开发",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#方式一-直接开发"},[s("span",null,"方式一：直接开发")])],-1),m=s("p",null,"这个方式适用于体验，无需任何开发环境。",-1),u={href:"https://github.com/wll8/sys-shim/releases/download/example/main.exe",target:"_blank",rel:"noopener noreferrer"},h=c(`<p>这个界面是通过同目录下的 html 文件实现的。使用您喜欢的编辑器编辑 html 文件并保存，然后重新运行 main.exe 即可看到修改结果。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>为了增加启动速度，会像浏览器一样缓存 html 文件，如果没有看到最新结果，可以按 <code>F5</code> 刷新一下页面。</p></div><h3 id="方式二-直接转换现有网页-开发中" tabindex="-1"><a class="header-anchor" href="#方式二-直接转换现有网页-开发中"><span>方式二：直接转换现有网页(开发中)</span></a></h3><p>如果要把已上线的网页转换为 sys-shim 应用，可以直接运行命令：</p><p><strong>第一步 在您的网页里使用系统 api</strong></p><p>例如，实现点击某按钮时打开计算器：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 在您的网页里添加一个按钮，点击时执行以下 js 代码</span>
window<span class="token punctuation">.</span>shim<span class="token punctuation">.</span>native<span class="token punctuation">.</span>process<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">&quot;calc&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>下一步 安装 sys-shim</strong></p><p>假设您已安装了 nodejs 。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">npm</span> i <span class="token parameter variable">-g</span> sys-shim
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>下一步 将网页转换为 sys-shim 应用</strong></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>sys-shim https://example.com/index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>运行该命令后，在当前目录会输出一个应用程序。运行后点击您的按钮，即可看到计算器被打开。</p><p>实际上该命令在转换时自动在您的网页里引用了 sys-shim 的 sdk 并进行了初始化。更多转换时的配置，可以查看文档：<code>// todo</code></p><h3 id="方式三-在任意项目中引用-sys-shim" tabindex="-1"><a class="header-anchor" href="#方式三-在任意项目中引用-sys-shim"><span>方式三：在任意项目中引用 sys-shim</span></a></h3><p>您也可以把 sys-shim 引入到您的项目中，例如使用如下代码：</p><ul><li>安装: 运行命令 <code>npm i sys-shim</code></li><li>导入: <ul><li>esm 方式 <code>import Sys from &#39;sys-shim&#39;</code></li><li>cjs 方式 <code>const Sys = require(&#39;sys-shim&#39;)</code></li><li>umd 方式 <code>&lt;script src=&quot;./node_modules/sys-shim/browser/main.umd.min.js&quot;&gt;&lt;/script&gt;</code></li></ul></li><li>启动 main.exe: 运行命令 <code>npx sys-shim</code></li><li>使用:<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Sys</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">log</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">wsUrl</span><span class="token operator">:</span> <span class="token string">&#39;ws://127.0.0.1:10005?token=tokentokentoken&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">shim</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  shim<span class="token punctuation">.</span>native<span class="token punctuation">.</span>win<span class="token punctuation">.</span><span class="token function">msgbox</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">hello</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">title</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token comment">// 调用系统 api</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>wsUrl 是 main.exe 启动后生成的 websocket 地址。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果您的应用是[由 main.exe 启动](.// todo)的，那么不需要配置 wsUrl。</p></div><h3 id="方式四-使用脚手架模板开发-开发中" tabindex="-1"><a class="header-anchor" href="#方式四-使用脚手架模板开发-开发中"><span>方式四：使用脚手架模板开发(开发中)</span></a></h3><p>为了快速开发各种应用，我们提供了一些模板，您可以基于模板快速投入开发。</p><ul><li>命令行</li><li>服务</li><li>界面 <ul><li>vue 模板</li><li>react 模板</li></ul></li></ul>`,22);function k(g,v){const t=e("ExternalLinkIcon"),i=e("RenderedHack");return o(),l("div",null,[d,m,s("p",null,[n("下载 "),s("a",u,[n("main.exe"),a(t)]),n(" 文件打开，会看到如下界面：")]),h,a(i)])}const x=p(r,[["render",k],["__file","your-first-app.html.vue"]]),_=JSON.parse('{"path":"/docs/getting-started/your-first-app.html","title":"您的第一个 sys-shim 应用","lang":"zh-CN","frontmatter":{"title":"您的第一个 sys-shim 应用","description":"方式一：直接开发 这个方式适用于体验，无需任何开发环境。 下载 main.exe 文件打开，会看到如下界面： 这个界面是通过同目录下的 html 文件实现的。使用您喜欢的编辑器编辑 html 文件并保存，然后重新运行 main.exe 即可看到修改结果。 提示 为了增加启动速度，会像浏览器一样缓存 html 文件，如果没有看到最新结果，可以按 F5 刷...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/sys-shim-doc/docs/getting-started/your-first-app.html"}],["meta",{"property":"og:site_name","content":"sys-shim"}],["meta",{"property":"og:title","content":"您的第一个 sys-shim 应用"}],["meta",{"property":"og:description","content":"方式一：直接开发 这个方式适用于体验，无需任何开发环境。 下载 main.exe 文件打开，会看到如下界面： 这个界面是通过同目录下的 html 文件实现的。使用您喜欢的编辑器编辑 html 文件并保存，然后重新运行 main.exe 即可看到修改结果。 提示 为了增加启动速度，会像浏览器一样缓存 html 文件，如果没有看到最新结果，可以按 F5 刷..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-14T10:59:48.000Z"}],["meta",{"property":"article:author","content":"wll8"}],["meta",{"property":"article:modified_time","content":"2024-05-14T10:59:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"您的第一个 sys-shim 应用\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-14T10:59:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wll8\\",\\"url\\":\\"https://github.com/wll8\\"}]}"]]},"headers":[{"level":3,"title":"方式一：直接开发","slug":"方式一-直接开发","link":"#方式一-直接开发","children":[]},{"level":3,"title":"方式二：直接转换现有网页(开发中)","slug":"方式二-直接转换现有网页-开发中","link":"#方式二-直接转换现有网页-开发中","children":[]},{"level":3,"title":"方式三：在任意项目中引用 sys-shim","slug":"方式三-在任意项目中引用-sys-shim","link":"#方式三-在任意项目中引用-sys-shim","children":[]},{"level":3,"title":"方式四：使用脚手架模板开发(开发中)","slug":"方式四-使用脚手架模板开发-开发中","link":"#方式四-使用脚手架模板开发-开发中","children":[]}],"git":{"createdTime":1710830845000,"updatedTime":1715684388000,"contributors":[{"name":"wll8","email":"xwdaysme@gmail.com","commits":2}]},"readingTime":{"minutes":1.88,"words":563},"filePathRelative":"docs/getting-started/your-first-app.md","localizedDate":"2024年3月19日","autoDesc":true}');export{x as comp,_ as data};
