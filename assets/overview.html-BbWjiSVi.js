import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as r,c,d as e,e as t,a,w as d,b as s}from"./app-BCVXAfwU.js";const m={},u=s(`<h2 id="globalthis-ext" tabindex="-1"><a class="header-anchor" href="#globalthis-ext"><span>globalThis.ext</span></a></h2><p>当通过 main.exe 加载时，会得到一个全局对象 ext，在浏览器环境下，该对象是一个 Promise（返回json）, 在 nodejs 中是一个 json。</p><p>json 内容为:</p><ul><li>ext.wsUrl</li></ul><p>当前 json-rpc 的 url 地址。你可以通过 <code>socket</code> 来配置 ip/port/token 。</p><ul><li>ext.toekn</li></ul><p>当前 json-rpc 的 token。</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;hwnd&quot;</span><span class="token operator">:</span> <span class="token number">198610</span><span class="token punctuation">,</span>
    <span class="token property">&quot;token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;36A07471-F13D-4048-91ED-E7A36BF2D8A8&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;wsUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ws://192.168.1.253:7788&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="globalthis-sys" tabindex="-1"><a class="header-anchor" href="#globalthis-sys"><span>globalThis.Sys</span></a></h2><p>当通过 main.exe 加载时，会得到一个全局对象 Sys，实例化此对象后，即可使用 sys-shim 提供的 api。</p><ul><li>参数为：wsUrl 地址，默认为 ext.wsUrl 。</li><li>返回值：main 对象。</li></ul>`,11),h={id:"main-ws",tabindex:"-1"},g={class:"header-anchor",href:"#main-ws"},k={href:"http://main.ws",target:"_blank",rel:"noopener noreferrer"},v=s('<p>ws 连接后的 rpc 实例。</p><h3 id="main-api" tabindex="-1"><a class="header-anchor" href="#main-api"><span>main.api</span></a></h3><p>这是对三方 api 的封装，默认包含 neutralino 。</p><h3 id="main-native" tabindex="-1"><a class="header-anchor" href="#main-native"><span>main.native</span></a></h3><p>调用原生方法，返回一个 Promise 数组，第一项为失败信息，后面为运行成功的返回值。示例：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">await</span> main<span class="token punctuation">.</span>native<span class="token punctuation">.</span>win<span class="token punctuation">.</span><span class="token function">msgbox</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hello</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>',6);function b(x,w){const o=n("ExternalLinkIcon"),i=n("RouteLink"),l=n("RenderedHack");return r(),c("div",null,[u,e("h3",h,[e("a",g,[e("span",null,[e("a",k,[t("main.ws"),a(o)])])])]),v,e("p",null,[a(i,{to:"/docs/roadmap.html"},{default:d(()=>[t("常用原生 API 文档")]),_:1})]),a(l)])}const j=p(m,[["render",b],["__file","overview.html.vue"]]),f=JSON.parse('{"path":"/docs/api/overview.html","title":"概览","lang":"zh-CN","frontmatter":{"title":"概览","description":"globalThis.ext 当通过 main.exe 加载时，会得到一个全局对象 ext，在浏览器环境下，该对象是一个 Promise（返回json）, 在 nodejs 中是一个 json。 json 内容为: ext.wsUrl 当前 json-rpc 的 url 地址。你可以通过 socket 来配置 ip/port/token 。 ext.t...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/sys-shim-doc/docs/api/overview.html"}],["meta",{"property":"og:site_name","content":"sys-shim"}],["meta",{"property":"og:title","content":"概览"}],["meta",{"property":"og:description","content":"globalThis.ext 当通过 main.exe 加载时，会得到一个全局对象 ext，在浏览器环境下，该对象是一个 Promise（返回json）, 在 nodejs 中是一个 json。 json 内容为: ext.wsUrl 当前 json-rpc 的 url 地址。你可以通过 socket 来配置 ip/port/token 。 ext.t..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-29T02:32:01.000Z"}],["meta",{"property":"article:author","content":"wll8"}],["meta",{"property":"article:modified_time","content":"2024-03-29T02:32:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"概览\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-29T02:32:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wll8\\",\\"url\\":\\"https://github.com/wll8\\"}]}"]]},"headers":[{"level":2,"title":"globalThis.ext","slug":"globalthis-ext","link":"#globalthis-ext","children":[]},{"level":2,"title":"globalThis.Sys","slug":"globalthis-sys","link":"#globalthis-sys","children":[{"level":3,"title":"main.ws","slug":"main-ws","link":"#main-ws","children":[]},{"level":3,"title":"main.api","slug":"main-api","link":"#main-api","children":[]},{"level":3,"title":"main.native","slug":"main-native","link":"#main-native","children":[]}]}],"git":{"createdTime":1710830845000,"updatedTime":1711679521000,"contributors":[{"name":"wll8","email":"xwdaysme@gmail.com","commits":8},{"name":"windyeasy","email":"windyeasy13gb@163.com","commits":4},{"name":"禾白","email":"61929206+hebaq@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":0.7,"words":210},"filePathRelative":"docs/api/overview.md","localizedDate":"2024年3月19日","autoDesc":true}');export{j as comp,f as data};
