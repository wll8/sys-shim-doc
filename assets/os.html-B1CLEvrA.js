import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,a as t}from"./app-Cphw7wZ-.js";const e={},o=t(`<p><code>Neutralino.os</code> 命名空间包含与用户操作系统相关的方法。</p><h2 id="os-execcommand-command-options" tabindex="-1"><a class="header-anchor" href="#os-execcommand-command-options"><span>os.execCommand(command, options)</span></a></h2><p>执行一个命令并返回输出。</p><h3 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h3><ul><li><code>command</code> String: 将要执行的命令。</li></ul><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options"><span>Options</span></a></h3><ul><li><code>background</code> Boolean: 若设置为 <code>true</code>，则在后台执行命令并立即解析Promise。这个选项使得进程从API函数调用中分离，因此如果你需要稍后连接到新创建的进程，请考虑使用 <code>os.spawnProcess</code>。</li><li><code>stdIn</code> String: 标准输入字符串。</li><li><code>cwd</code> String: 当前工作目录。</li></ul><h3 id="return-object-awaited" tabindex="-1"><a class="header-anchor" href="#return-object-awaited"><span>Return Object (awaited):</span></a></h3><ul><li><code>pid</code> Number: 进程标识符。</li><li><code>stdOut</code> String: 标准输出。</li><li><code>stdErr</code> String: 标准错误。</li><li><code>exitCode</code> Number: 进程的退出代码。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">&#39;python --version&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">你的Python版本：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>info<span class="token punctuation">.</span>stdOut<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">&#39;npm start&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os-spawnprocess-command-cwd" tabindex="-1"><a class="header-anchor" href="#os-spawnprocess-command-cwd"><span>os.spawnProcess(command, cwd)</span></a></h2><p>在后台基于一个命令生成进程，并让开发者控制它。</p><h3 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h3><ul><li><code>command</code> String: 在新进程中执行的命令。</li><li><code>cwd</code> String (可选): 当前工作目录。</li></ul><h3 id="return-object-awaited-1" tabindex="-1"><a class="header-anchor" href="#return-object-awaited-1"><span>Return Object (awaited):</span></a></h3><ul><li><code>id</code> Number: Neutralino专用的进程标识符。此值用于通过本地API控制进程。</li><li><code>pid</code> Number: 操作系统的进程标识符。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> pingProc <span class="token operator">=</span> <span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">spawnProcess</span><span class="token punctuation">(</span><span class="token string">&#39;ping neutralino.js.org&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Neutralino<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;spawnedProcess&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pingProc<span class="token punctuation">.</span>id <span class="token operator">==</span> evt<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&#39;stdOut&#39;</span><span class="token operator">:</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&#39;stdErr&#39;</span><span class="token operator">:</span>
                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&#39;exit&#39;</span><span class="token operator">:</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Ping进程已终止，退出代码：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>evt<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os-updatespawnedprocess-id-action-data" tabindex="-1"><a class="header-anchor" href="#os-updatespawnedprocess-id-action-data"><span>os.updateSpawnedProcess(id, action, data)</span></a></h2><p>根据提供的操作和数据更新生成的进程。如果无法更新进程，则抛出 <code>NE_OS_UNLTOUP</code>。</p><h3 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters</span></a></h3><ul><li><code>id</code> Number: Neutralino专用的进程标识符。</li><li><code>action</code> String: 要执行的操作。仅接受以下值： <ul><li><code>stdIn</code>: 通过标准输入流向进程发送数据。</li><li><code>stdInEnd</code>: 关闭标准输入流文件描述符。</li><li><code>exit</code>: 终止进程。</li></ul></li><li><code>data</code> Object (可选): <code>action</code> 的额外数据。如果 <code>action</code> 是 <code>stdIn</code>，则发送标准输入字符串。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> nodeProc <span class="token operator">=</span> <span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">spawnProcess</span><span class="token punctuation">(</span><span class="token string">&#39;node&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

Neutralino<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;spawnedProcess&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nodeProc<span class="token punctuation">.</span>id <span class="token operator">==</span> evt<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token string">&#39;stdOut&#39;</span><span class="token operator">:</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&#39;stdErr&#39;</span><span class="token operator">:</span>
                console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>evt<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token string">&#39;exit&#39;</span><span class="token operator">:</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Node.js进程已终止，退出代码：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>evt<span class="token punctuation">.</span>detail<span class="token punctuation">.</span>data<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">updateSpawnedProcess</span><span class="token punctuation">(</span>nodeProc<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">&#39;stdIn&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;console.log(5 + 5);&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">updateSpawnedProcess</span><span class="token punctuation">(</span>nodeProc<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">&#39;stdInEnd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os-getspawnedprocesses" tabindex="-1"><a class="header-anchor" href="#os-getspawnedprocesses"><span>os.getSpawnedProcesses()</span></a></h2><p>返回所有生成的进程。</p><h3 id="return-object-awaited-2" tabindex="-1"><a class="header-anchor" href="#return-object-awaited-2"><span>Return Object (awaited):</span></a></h3><p>一个<code>SpawnedProcess</code>对象的数组。</p><h4 id="spawnedprocess" tabindex="-1"><a class="header-anchor" href="#spawnedprocess"><span>SpawnedProcess</span></a></h4><ul><li><code>id</code> Number: Neutralino专用的进程标识符。</li><li><code>pid</code> Number: 操作系统的进程标识符。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">spawnProcess</span><span class="token punctuation">(</span><span class="token string">&#39;ping neutralino.js.org&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">spawnProcess</span><span class="token punctuation">(</span><span class="token string">&#39;ping codezri.org&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> processes <span class="token operator">=</span> <span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">getSpawnedProcesses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>processes<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os-getenv-key" tabindex="-1"><a class="header-anchor" href="#os-getenv-key"><span>os.getEnv(key)</span></a></h2><p>提供给定环境变量的值。</p><h3 id="parameters-3" tabindex="-1"><a class="header-anchor" href="#parameters-3"><span>Parameters</span></a></h3><ul><li><code>key</code> String: 环境变量的名称。</li></ul><h3 id="return-string-awaited" tabindex="-1"><a class="header-anchor" href="#return-string-awaited"><span>Return String (awaited):</span></a></h3><p>给定环境变量的值。如果环境变量未定义，则返回空字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">getEnv</span><span class="token punctuation">(</span><span class="token string">&#39;USER&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">USER = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os-getenvs" tabindex="-1"><a class="header-anchor" href="#os-getenvs"><span>os.getEnvs()</span></a></h2><p>返回所有环境变量及其值。</p><h3 id="return-object-awaited-3" tabindex="-1"><a class="header-anchor" href="#return-object-awaited-3"><span>Return Object (awaited):</span></a></h3><p>以键值对形式的环境变量详情。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> envs <span class="token operator">=</span> <span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">getEnvs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>envs<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os-showopendialog-title-options" tabindex="-1"><a class="header-anchor" href="#os-showopendialog-title-options"><span>os.showOpenDialog(title, options)</span></a></h2><p>显示文件打开对话框。你可以使用这个函数来获取现有文件的路径。</p><h3 id="parameters-4" tabindex="-1"><a class="header-anchor" href="#parameters-4"><span>Parameters</span></a></h3><ul><li><code>title</code> String (可选): 对话框的标题。</li></ul><h3 id="options-1" tabindex="-1"><a class="header-anchor" href="#options-1"><span>Options</span></a></h3><ul><li><code>filters</code> Filter[] (可选): 一个Filter对象数组，用于过滤文件列表。</li><li><code>multiSelections</code> (可选): 启用多选。</li><li><code>defaultPath</code> String (可选): 对话框显示的初始路径/文件名。</li></ul><h4 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span>Filter</span></a></h4><ul><li><code>name</code> String: 过滤器名称。</li><li><code>extensions</code> String: 文件扩展名数组。例如：<code>[&#39;jpg&#39;, &#39;png&#39;]</code></li></ul><h3 id="return-object-awaited-4" tabindex="-1"><a class="header-anchor" href="#return-object-awaited-4"><span>Return Object (awaited):</span></a></h3><p>选中的条目数组。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> entries <span class="token operator">=</span> <span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">showOpenDialog</span><span class="token punctuation">(</span><span class="token string">&#39;打开图表&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">defaultPath</span><span class="token operator">:</span> <span class="token string">&#39;/home/my/directory/&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;图片&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;jpg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;png&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;所有文件&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;您已选择:&#39;</span><span class="token punctuation">,</span> entries<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os-showsavedialog-title-options" tabindex="-1"><a class="header-anchor" href="#os-showsavedialog-title-options"><span>os.showSaveDialog(title, options)</span></a></h2><p>显示文件保存对话框。您可以使用这个函数来获取创建新文件的路径。</p><h3 id="parameters-5" tabindex="-1"><a class="header-anchor" href="#parameters-5"><span>Parameters</span></a></h3><ul><li><code>title</code> String (可选): 对话框的标题。</li></ul><h3 id="options-2" tabindex="-1"><a class="header-anchor" href="#options-2"><span>Options</span></a></h3><ul><li><code>filters</code> Filter[] (可选): 一个Filter对象数组，用于过滤文件列表。</li><li><code>forceOverwrite</code> Boolean (可选): 跳过文件覆盖警告消息。</li><li><code>defaultPath</code> String (可选): 对话框显示的初始路径/文件名。</li></ul><h4 id="filter-1" tabindex="-1"><a class="header-anchor" href="#filter-1"><span>Filter</span></a></h4><ul><li><code>name</code> String: 过滤器名称。</li><li><code>extensions</code> String[]: 文件扩展名数组。例如：<code>[&#39;jpg&#39;, &#39;png&#39;]</code></li></ul><h3 id="return-string-awaited-1" tabindex="-1"><a class="header-anchor" href="#return-string-awaited-1"><span>Return String (awaited):</span></a></h3><p>选中的文件名。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> entry <span class="token operator">=</span> <span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">showSaveDialog</span><span class="token punctuation">(</span><span class="token string">&#39;保存文件&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">defaultPath</span><span class="token operator">:</span> <span class="token string">&#39;untitled.jpg&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">filters</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;图片&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;jpg&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;png&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;所有文件&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;*&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;您已选择:&#39;</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os-showfolderdialog-title" tabindex="-1"><a class="header-anchor" href="#os-showfolderdialog-title"><span>os.showFolderDialog(title)</span></a></h2><p>显示文件夹打开对话框。</p><h3 id="parameters-6" tabindex="-1"><a class="header-anchor" href="#parameters-6"><span>Parameters</span></a></h3><ul><li><code>title</code> String (可选): 对话框的标题。</li></ul><h3 id="options-3" tabindex="-1"><a class="header-anchor" href="#options-3"><span>Options</span></a></h3><ul><li><code>defaultPath</code> String (可选): 对话框显示的初始路径。</li></ul><h3 id="return-string-awaited-2" tabindex="-1"><a class="header-anchor" href="#return-string-awaited-2"><span>Return String (awaited):</span></a></h3><p>选中的文件夹。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> entry <span class="token operator">=</span> <span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">showFolderDialog</span><span class="token punctuation">(</span><span class="token string">&#39;选择安装目录&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">defaultPath</span><span class="token operator">:</span> <span class="token string">&#39;/home/my/directory/&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;您已选择:&#39;</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os-shownotification-title-content-icon" tabindex="-1"><a class="header-anchor" href="#os-shownotification-title-content-icon"><span>os.showNotification(title, content, icon)</span></a></h2><p>显示一个通知消息。</p><h3 id="parameters-7" tabindex="-1"><a class="header-anchor" href="#parameters-7"><span>Parameters</span></a></h3><ul><li><code>title</code> String: 通知标题。</li><li><code>content</code> String: 通知内容。</li><li><code>icon</code> String (可选): 图标名称。接受的值有：<code>INFO</code>, <code>WARNING</code>, <code>ERROR</code> 和 <code>QUESTION</code>。默认值为 <code>INFO</code>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">showNotification</span><span class="token punctuation">(</span><span class="token string">&#39;你好世界&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;它运行正常！祝你有美好的一天&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">showNotification</span><span class="token punctuation">(</span><span class="token string">&#39;哎呀 :/&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;出了些问题&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ERROR&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os-showmessagebox-title-content-choice-icon" tabindex="-1"><a class="header-anchor" href="#os-showmessagebox-title-content-choice-icon"><span>os.showMessageBox(title, content, choice, icon)</span></a></h2><p>显示一个消息框。</p><h3 id="parameters-8" tabindex="-1"><a class="header-anchor" href="#parameters-8"><span>Parameters</span></a></h3><ul><li><code>title</code> String: 消息框的标题。</li><li><code>content</code> String: 消息框的内容。</li><li><code>choice</code> String (可选): 消息框按钮。接受的值有：<code>OK</code>, <code>OK_CANCEL</code>, <code>YES_NO</code>, <code>YES_NO_CANCEL</code>, <code>RETRY_CANCEL</code>, 和 <code>ABORT_RETRY_IGNORE</code>。默认值为 <code>OK</code>。</li><li><code>icon</code> String (可选): 图标名称。接受的值有：<code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, 和 <code>QUESTION</code>。默认值为 <code>INFO</code>。</li></ul><h3 id="return-string-awaited-3" tabindex="-1"><a class="header-anchor" href="#return-string-awaited-3"><span>Return String (awaited):</span></a></h3><p>用户的 <code>choice</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">showMessageBox</span><span class="token punctuation">(</span><span class="token string">&#39;你好&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;欢迎&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> button <span class="token operator">=</span> <span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os
            <span class="token punctuation">.</span><span class="token function">showMessageBox</span><span class="token punctuation">(</span><span class="token string">&#39;确认&#39;</span><span class="token punctuation">,</span>
                            <span class="token string">&#39;你确定你要退出吗？&#39;</span><span class="token punctuation">,</span>
                            <span class="token string">&#39;YES_NO&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;QUESTION&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>button <span class="token operator">==</span> <span class="token string">&#39;YES&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Neutralino<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os-settray-options" tabindex="-1"><a class="header-anchor" href="#os-settray-options"><span>os.setTray(options)</span></a></h2><p>创建/更新托盘图标和菜单。</p><h3 id="options-4" tabindex="-1"><a class="header-anchor" href="#options-4"><span>Options</span></a></h3><ul><li><code>icon</code> String: 托盘图标路径。例如：<code>/resources/icons/trayIcon.png</code>。一个 <code>20x20</code> 尺寸的PNG图像文件在所有支持的操作系统上都能很好工作。</li><li><code>menuItems</code> TrayMenuItem[]: <code>TrayMenuItem</code> 对象数组。</li></ul><h4 id="traymenuitem" tabindex="-1"><a class="header-anchor" href="#traymenuitem"><span>TrayMenuItem</span></a></h4><ul><li><code>id</code> String (可选): 每个菜单项的唯一标识符。</li><li><code>text</code> String: 菜单项的标签。这是一个必填字段。使用 <code>-</code>（连字符）字符表示菜单分隔符。</li><li><code>isDisabled</code> Boolean (可选): 一个布尔标志，用于禁用/启用特定菜单项。</li><li><code>isChecked</code> Boolean (可选): 一个布尔标志，用于标记特定菜单项为选中状态。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> tray <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">icon</span><span class="token operator">:</span> <span class="token string">&#39;/resources/icons/trayIcon.png&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">menuItems</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;about&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;关于&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;quit&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;退出&quot;</span><span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">setTray</span><span class="token punctuation">(</span>tray<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os-getpath-name" tabindex="-1"><a class="header-anchor" href="#os-getpath-name"><span>os.getPath(name)</span></a></h2><p>返回已知的平台特定文件夹，如下载、音乐、视频等。</p><h3 id="parameters-9" tabindex="-1"><a class="header-anchor" href="#parameters-9"><span>Parameters</span></a></h3><ul><li><code>title</code> String: 文件夹的名称。接受的值有：<code>config</code>, <code>data</code>, <code>cache</code>, <code>documents</code>, <code>pictures</code>, <code>music</code>, <code>video</code>, <code>downloads</code>, <code>savedGames1</code>, 和 <code>savedGames2</code>。对无效的文件夹名抛出 <code>NE_OS_INVKNPT</code>。</li></ul><h3 id="return-string-awaited-4" tabindex="-1"><a class="header-anchor" href="#return-string-awaited-4"><span>Return String (awaited):</span></a></h3><p>路径。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> downloadsPath <span class="token operator">=</span> <span class="token keyword">await</span> Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token string">&#39;downloads&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">下载文件夹：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>downloadsPath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="os-open-url" tabindex="-1"><a class="header-anchor" href="#os-open-url"><span>os.open(url)</span></a></h2><p>用默认的网页浏览器打开一个URL。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果你的应用正在默认的网页浏览器中运行，这个方法将打开一个新标签页。</p></div><h3 id="parameters-10" tabindex="-1"><a class="header-anchor" href="#parameters-10"><span>Parameters</span></a></h3><ul><li><code>url</code> String: 要打开的URL。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Neutralino<span class="token punctuation">.</span>os<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;https://neutralino.js.org&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,104),p=[o];function i(c,l){return s(),a("div",null,p)}const d=n(e,[["render",i],["__file","os.html.vue"]]),k=JSON.parse('{"path":"/docs/neutralinojs/api/os.html","title":"Neutralino.os","lang":"zh-CN","frontmatter":{"title":"Neutralino.os","description":"Neutralino.os 命名空间包含与用户操作系统相关的方法。 os.execCommand(command, options) 执行一个命令并返回输出。 Parameters command String: 将要执行的命令。 Options background Boolean: 若设置为 true，则在后台执行命令并立即解析Promise。这个...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/sys-shim-doc/docs/neutralinojs/api/os.html"}],["meta",{"property":"og:site_name","content":"sys-shim"}],["meta",{"property":"og:title","content":"Neutralino.os"}],["meta",{"property":"og:description","content":"Neutralino.os 命名空间包含与用户操作系统相关的方法。 os.execCommand(command, options) 执行一个命令并返回输出。 Parameters command String: 将要执行的命令。 Options background Boolean: 若设置为 true，则在后台执行命令并立即解析Promise。这个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-19T06:47:25.000Z"}],["meta",{"property":"article:author","content":"wll8"}],["meta",{"property":"article:modified_time","content":"2024-03-19T06:47:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Neutralino.os\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-19T06:47:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wll8\\",\\"url\\":\\"https://github.com/wll8\\"}]}"]]},"headers":[{"level":2,"title":"os.execCommand(command, options)","slug":"os-execcommand-command-options","link":"#os-execcommand-command-options","children":[{"level":3,"title":"Parameters","slug":"parameters","link":"#parameters","children":[]},{"level":3,"title":"Options","slug":"options","link":"#options","children":[]},{"level":3,"title":"Return Object (awaited):","slug":"return-object-awaited","link":"#return-object-awaited","children":[]}]},{"level":2,"title":"os.spawnProcess(command, cwd)","slug":"os-spawnprocess-command-cwd","link":"#os-spawnprocess-command-cwd","children":[{"level":3,"title":"Parameters","slug":"parameters-1","link":"#parameters-1","children":[]},{"level":3,"title":"Return Object (awaited):","slug":"return-object-awaited-1","link":"#return-object-awaited-1","children":[]}]},{"level":2,"title":"os.updateSpawnedProcess(id, action, data)","slug":"os-updatespawnedprocess-id-action-data","link":"#os-updatespawnedprocess-id-action-data","children":[{"level":3,"title":"Parameters","slug":"parameters-2","link":"#parameters-2","children":[]}]},{"level":2,"title":"os.getSpawnedProcesses()","slug":"os-getspawnedprocesses","link":"#os-getspawnedprocesses","children":[{"level":3,"title":"Return Object (awaited):","slug":"return-object-awaited-2","link":"#return-object-awaited-2","children":[]}]},{"level":2,"title":"os.getEnv(key)","slug":"os-getenv-key","link":"#os-getenv-key","children":[{"level":3,"title":"Parameters","slug":"parameters-3","link":"#parameters-3","children":[]},{"level":3,"title":"Return String (awaited):","slug":"return-string-awaited","link":"#return-string-awaited","children":[]}]},{"level":2,"title":"os.getEnvs()","slug":"os-getenvs","link":"#os-getenvs","children":[{"level":3,"title":"Return Object (awaited):","slug":"return-object-awaited-3","link":"#return-object-awaited-3","children":[]}]},{"level":2,"title":"os.showOpenDialog(title, options)","slug":"os-showopendialog-title-options","link":"#os-showopendialog-title-options","children":[{"level":3,"title":"Parameters","slug":"parameters-4","link":"#parameters-4","children":[]},{"level":3,"title":"Options","slug":"options-1","link":"#options-1","children":[]},{"level":3,"title":"Return Object (awaited):","slug":"return-object-awaited-4","link":"#return-object-awaited-4","children":[]}]},{"level":2,"title":"os.showSaveDialog(title, options)","slug":"os-showsavedialog-title-options","link":"#os-showsavedialog-title-options","children":[{"level":3,"title":"Parameters","slug":"parameters-5","link":"#parameters-5","children":[]},{"level":3,"title":"Options","slug":"options-2","link":"#options-2","children":[]},{"level":3,"title":"Return String (awaited):","slug":"return-string-awaited-1","link":"#return-string-awaited-1","children":[]}]},{"level":2,"title":"os.showFolderDialog(title)","slug":"os-showfolderdialog-title","link":"#os-showfolderdialog-title","children":[{"level":3,"title":"Parameters","slug":"parameters-6","link":"#parameters-6","children":[]},{"level":3,"title":"Options","slug":"options-3","link":"#options-3","children":[]},{"level":3,"title":"Return String (awaited):","slug":"return-string-awaited-2","link":"#return-string-awaited-2","children":[]}]},{"level":2,"title":"os.showNotification(title, content, icon)","slug":"os-shownotification-title-content-icon","link":"#os-shownotification-title-content-icon","children":[{"level":3,"title":"Parameters","slug":"parameters-7","link":"#parameters-7","children":[]}]},{"level":2,"title":"os.showMessageBox(title, content, choice, icon)","slug":"os-showmessagebox-title-content-choice-icon","link":"#os-showmessagebox-title-content-choice-icon","children":[{"level":3,"title":"Parameters","slug":"parameters-8","link":"#parameters-8","children":[]},{"level":3,"title":"Return String (awaited):","slug":"return-string-awaited-3","link":"#return-string-awaited-3","children":[]}]},{"level":2,"title":"os.setTray(options)","slug":"os-settray-options","link":"#os-settray-options","children":[{"level":3,"title":"Options","slug":"options-4","link":"#options-4","children":[]}]},{"level":2,"title":"os.getPath(name)","slug":"os-getpath-name","link":"#os-getpath-name","children":[{"level":3,"title":"Parameters","slug":"parameters-9","link":"#parameters-9","children":[]},{"level":3,"title":"Return String (awaited):","slug":"return-string-awaited-4","link":"#return-string-awaited-4","children":[]}]},{"level":2,"title":"os.open(url)","slug":"os-open-url","link":"#os-open-url","children":[{"level":3,"title":"Parameters","slug":"parameters-10","link":"#parameters-10","children":[]}]}],"git":{"createdTime":1710830845000,"updatedTime":1710830845000,"contributors":[{"name":"wll8","email":"xwdaysme@gmail.com","commits":1}]},"readingTime":{"minutes":4.98,"words":1495},"filePathRelative":"docs/neutralinojs/api/os.md","localizedDate":"2024年3月19日","autoDesc":true}');export{d as comp,k as data};
